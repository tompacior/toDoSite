"use strict";!function(){var n=null,o=null,j=null,a=null,c=null,s=null,d=null;function l(){this.myRequest="http://localhost:3000/toDoTask",this.jsonObject={title:"",text:"",id:0}}document.addEventListener("DOMContentLoaded",function(e){function t(){for(var e=new l;j.firstChild;)j.removeChild(j.firstChild);e.GET("")}n=document.querySelector(".toDoNew__input"),o=document.querySelector(".toDoNew__textarea"),j=document.querySelector(".toDoItems"),a=document.querySelector(".toDoNew"),c=document.querySelector(".toDoSearch"),s=document.querySelector(".toDoSearch__input"),d=document.querySelector(".toDoWorks__btn"),t(),a.addEventListener("submit",function(e){e.preventDefault(),console.log("Pobrane dane z DOM: ",n.value," Text: ",o.value);var t=new l;if(t.validate(n.value,o.value)){for(;j.firstChild;)j.removeChild(j.firstChild);t.POST(),n.value="",o.value=""}else alert("Wpisz poprawne dane!")}),c.addEventListener("submit",function(e){e.preventDefault();var t=new l;if(console.log("Szukaj: ",s.value),""!==s.value){for(;j.firstChild;)j.removeChild(j.firstChild);t.GET("?q=".concat(s.value))}}),d.addEventListener("click",t),document.addEventListener("click",function(e){"task__clean-btn"===e.target.className&&(console.log("Usuwam zadanie: ",e.srcElement.id),(new l).DELETE("/".concat(e.srcElement.id)),t())})}),l.prototype.validate=function(e,t){return console.log("uruchomiona  Validate"),!(""===e&""===t)&&(this.jsonObject.title=e,this.jsonObject.text=t,!0)},l.prototype.addTask=function(e){this.jsonObject.title=e.title,this.jsonObject.text=e.text,this.jsonObject.id=e.id;var t=document.createElement("article");t.classList.add("task"),t.id=this.jsonObject.id;var n=document.createElement("div");n.classList.add("task__header");var o=document.createElement("div");o.classList.add("task__text");var a=document.createElement("div");a.classList.add("task__clear-both"),t.appendChild(n),t.appendChild(a),t.appendChild(o),j.appendChild(t);var c=document.createElement("div");c.classList.add("task__title");var s=document.createElement("h3"),d=document.createTextNode(this.jsonObject.title);s.appendChild(d),c.appendChild(s);var l=document.createElement("div");l.classList.add("task__clean");var r=document.createElement("button");r.classList.add("task__clean-btn"),r.id=this.jsonObject.id;var i=document.createTextNode("Usu≈Ñ");r.appendChild(i),l.appendChild(r);var u=new Date,h=document.createElement("div");h.classList.add("task__date");var p=document.createTextNode("".concat(u.getDate(),".").concat(u.getMonth()+1,".").concat(u.getFullYear()));h.appendChild(p);var m=document.createElement("div");m.classList.add("task__time");var v=document.createTextNode("".concat(u.getHours(),":").concat(u.getMinutes()));m.appendChild(v);var f=document.createElement("P"),E=document.createTextNode(this.jsonObject.text);f.appendChild(E),n.appendChild(c),n.appendChild(l),n.appendChild(m),n.appendChild(h),o.appendChild(f),console.log("Finish task - AddTask")},l.prototype.POST=function(){var t=this;fetch(this.myRequest,{method:"post",headers:{"Content-type":"application/json; charset=UTF-8"},body:JSON.stringify(this.jsonObject)}).then(function(e){return e.json()}).then(function(e){console.log("We send:"),console.log(e),t.GET("")})},l.prototype.DELETE=function(e){fetch(this.myRequest+e,{method:"delete"}).then(function(e){return e.ok?e.json():Promise.reject(e)}).then(function(e){console.log("Respond GET: ",e)}).catch(function(e){404===e.status?console.log("Error: 404 Not Found"):400===e.status?console.log("Error: 400 Bad Request! Incorrect request ups..."):console.log("Other error: ",e.status)})},l.prototype.GET=function(e){var n=this;fetch(this.myRequest+e).then(function(e){return e.ok?e.json():Promise.reject(e)}).then(function(e){console.log("Respond GET: ",e);for(var t=0;t<e.length;t++)n.addTask(e[t])}).catch(function(e){404===e.status?console.log("Error: 404 Not Found"):400===e.status?console.log("Error: 400 Bad Request! Incorrect request ups..."):console.log("Other error: ",e.status)})}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
