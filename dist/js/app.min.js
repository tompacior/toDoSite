"use strict";!function(){var n=[];function c(){this.title="",this.text=""}document.querySelector(".toDoNew__btn").addEventListener("click",function(e){e.preventDefault();var t=document.querySelector(".toDoNew__input").value,a=document.querySelector(".toDoNew__textarea").value,d=new c;d.validate(t,a),d.addTask(),n.push(d)}),c.prototype.validate=function(e,t){console.log("uruchomiona  Validate"),this.title=e,this.text=t},c.prototype.addTask=function(){console.log("uruchomiona  AddTask");var e=document.querySelector(".toDoItem");console.log(e);var t=document.createElement("article");t.classList.add("task");var a=document.createElement("div");a.classList.add("task__header");var d=document.createElement("div");d.classList.add("task__text");var n=document.createElement("div");n.classList.add("task__clear-both"),console.log(t),t.appendChild(a),t.appendChild(n),t.appendChild(d),e.appendChild(t);var c=document.createElement("div");c.classList.add("task__title");var o=document.createElement("h3"),l=document.createTextNode(this.title);o.appendChild(l),c.appendChild(o);var i=document.createElement("div");i.classList.add("task__clean");var s=document.createElement("button");s.classList.add("task__clean-btn");var r=document.createTextNode("Usuń");s.appendChild(r),i.appendChild(s);var u=new Date,p=document.createElement("div");p.classList.add("task__date");var m=document.createTextNode("".concat(u.getDate(),".").concat(u.getMonth()+1,".").concat(u.getFullYear()));p.appendChild(m);var v=document.createElement("div");v.classList.add("task__time");var h=document.createTextNode("".concat(u.getHours(),":").concat(u.getMinutes()));v.appendChild(h);var _=document.createElement("P"),C=document.createTextNode(this.text);_.appendChild(C),a.appendChild(c),a.appendChild(i),a.appendChild(v),a.appendChild(p),d.appendChild(_),console.log(" powinno działać")}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
